package pruebas;

import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Iterator;
import poker.cliente.negocio.PokerClient;
import javax.swing.DefaultListModel;
import poker.cliente.negocio.OnPackageListenerClient;
import poker.servidor.datos.Jugador;
import poker.servidor.negocio.Mesa;

/**
 * Vista cuando iniciamos la vista
 * @author LIMBERT
 */
public class InicioView extends javax.swing.JPanel implements OnPackageListenerClient{
    
    private PokerClient cliente = null;
    private DefaultListModel usuarios = null;
        
    private int cantidadmesas = 0;
    private int idButton1 = 1;
    private int idButton2 = 2;
    
    /**
     * Vista con la lista de usuarios y lista de mesas
     * @param cliente Negocio del cliente
     * @param lst Escuchador de eventos para mostrar las vistas
     */
    public InicioView(PokerClient cliente, ActionListener lst) {
        initComponents();
        this.inicializar(cliente, lst);
    }
    private void inicializar(PokerClient cliente, ActionListener lst){        
        this.cliente = cliente;
        this.pintarmesa();
        usuarios = new DefaultListModel();

        this.btnMesaAbajo.addActionListener(lst);
        this.btnMesaArriba.addActionListener(lst);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnMesaArriba = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstJugadores = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        btnMesaAbajo = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstJugadoresArriba = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstJugadoresAbajo = new javax.swing.JList<>();
        btnSalir = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 51, 51));
        setMaximumSize(new java.awt.Dimension(450, 350));
        setMinimumSize(new java.awt.Dimension(450, 350));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(450, 350));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnMesaArriba.setBackground(new java.awt.Color(0, 204, 0));
        btnMesaArriba.setMaximumSize(new java.awt.Dimension(90, 90));
        btnMesaArriba.setMinimumSize(new java.awt.Dimension(90, 90));
        btnMesaArriba.setPreferredSize(new java.awt.Dimension(90, 90));
        btnMesaArriba.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMesaArribaActionPerformed(evt);
            }
        });
        add(btnMesaArriba, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 50, -1, -1));

        jScrollPane1.setViewportView(lstJugadores);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 57, 129, 221));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 204));
        jLabel1.setText("Jugadores en Mesa");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, -1, -1));

        btnMesaAbajo.setBackground(new java.awt.Color(51, 204, 0));
        btnMesaAbajo.setPreferredSize(new java.awt.Dimension(90, 90));
        btnMesaAbajo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMesaAbajoActionPerformed(evt);
            }
        });
        add(btnMesaAbajo, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 160, -1, -1));

        jButton3.setText("Siguientes mesas >>");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 260, 180, 60));

        jScrollPane2.setViewportView(lstJugadoresArriba);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 50, 80, 90));

        jScrollPane3.setViewportView(lstJugadoresAbajo);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 160, 80, 90));

        btnSalir.setText("X");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        add(btnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, 40, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poker/cliente/presentacion/screensaver-fantasy-wallpaper-inspiration-widescreen-gallery-sfondi-screensavers-16962.jpg"))); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, 170, 20));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 204));
        jLabel3.setText("Lista de jugadores");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 22, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 204));
        jLabel4.setText("Lista de Mesas");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 20, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        idButton1 = idButton1 +2;
        idButton2 = idButton2 +2;
        if (cantidadmesas<idButton1) {
           idButton1 = 1;
           idButton2 = 2; 
        }
        pintarmesa();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void btnMesaArribaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMesaArribaActionPerformed
        cliente.ingresarMesa(idButton1);
    }//GEN-LAST:event_btnMesaArribaActionPerformed

    private void btnMesaAbajoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMesaAbajoActionPerformed
        cliente.ingresarMesa(idButton2);     
    }//GEN-LAST:event_btnMesaAbajoActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
      System.exit(0);
    }//GEN-LAST:event_btnSalirActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMesaAbajo;
    private javax.swing.JButton btnMesaArriba;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> lstJugadores;
    private javax.swing.JList<String> lstJugadoresAbajo;
    private javax.swing.JList<String> lstJugadoresArriba;
    // End of variables declaration//GEN-END:variables

    /**
     * Metodo que carga todos los jugadores en la lista
     */
    /**
     * Elimina un usuario de la lista de usuarios
     * @param key Identificador primario del usuario conectado
     */
    private void removerJugador(int key){
        for(int i = 0; i < usuarios.getSize(); i++){
            UsuarioModel u = (UsuarioModel) usuarios.get(i);
            if(u.getKey() == key){
                usuarios.remove(i);
                lstJugadores.setModel(usuarios);
                this.updateUI();
                return;
            }
        }
    }
    /**
     * Adiciona un jugador a la lista de jugadores conectado en el servidor
     * @param usr Modelo de usuario
     */
    private void addJugador(UsuarioModel usr){
        usuarios.addElement(usr);
        lstJugadores.setModel(usuarios);
    }
    /**
    * este metodo contaviliza la cantidad de mesas exixtente
    */
    private void cargarmesa(){
          cantidadmesas = cliente.getMesas().size();
    }
    /**
    * este metodo pinta los botones con el numero de las mesas y llena la lista
    * de los jugadores de cada mesa
    */
    public void pintarmesa(){        
        btnMesaAbajo.setVisible(true);
        lstJugadoresAbajo.setVisible(true);
        if (cantidadmesas >= idButton1) {
            btnMesaArriba.setText("mesa  " + String.valueOf(idButton1));
            jugmesa1();
            if (cantidadmesas >= idButton2) {
                btnMesaAbajo.setText("mesa  " + String.valueOf(idButton2));
                jugmesa2();
            }else{
                btnMesaAbajo.setVisible(false);
                lstJugadoresAbajo.setVisible(false);
            }
        }
 
    }
    /**
    * este metodo carga lista de jugadores de la opcion uno
    */
    private void jugmesa1(){
            usuarios = new DefaultListModel();
            lstJugadoresArriba.setModel(usuarios);
            lstJugadoresArriba.setModel(listarmesa(idButton1, usuarios));
    }
    /**
    * este metodo carga lista de jugadores de la opcion dos
    */
    private void jugmesa2(){
            usuarios = new DefaultListModel();
            lstJugadoresAbajo.setModel(usuarios);
            lstJugadoresAbajo.setModel(listarmesa(idButton2, usuarios));
    }
    /**
     * este metodo te devuelve la lista de los jugadores de una mesa
     * @param id identificador de la mesa
     * @param usuarios en un modelo para cargar la jlist
     * @return DefaultListModel
     */
    private DefaultListModel listarmesa(int id, DefaultListModel usuarios){
        Mesa m = (Mesa) cliente.getMesas().get(id);
        HashMap<Integer, Jugador> lista = m.getJugadores();
        for (Jugador j : lista.values()) {
            System.out.println("jugador en mesa 1 : " + j.getNickName());
            usuarios.addElement(j.getNickName());
        }
        return usuarios;
    } 
    
    @Override
    public void onNuevaMesa(Mesa mesa) {
        cargarmesa();
        pintarmesa();
    }

    @Override
    public void onMesaLlena(int idMesa, boolean estado) {
        
    }
    @Override
    public void onNuevoJugador(Jugador jg) {      
        System.out.println("InicioView.onNuevoJugador vista");
        this.addJugador(new UsuarioModel(jg.getId(), jg.getNickName()));
    }

    @Override
    public void onJugadorDesconectado(Jugador jg) {
        System.out.println("InicioViewer.onJugadorDesconectado ok");
        this.removerJugador(jg.getId());
        // estas lineas de abajo dan error por algunos cambios que hize limbert
        jugmesa1();        
        jugmesa2();        
    }
    
}

class UsuarioModel{
    private int key = 0;
    private String userName = "";
    /**
     * Constructor de clase
     * @param key identificador unico de usuario
     * @param userName nombre de usuario de la persona que acaba de conectarse
     * @param ip ip del cliente que se conecto
     */
    public UsuarioModel(int key, String userName){
        this.key = key;
        this.userName = userName;        
    }
    public int getKey(){
        return this.key;
    }
    public String getUserName(){
        return this.userName;
    }
    @Override
    public String toString(){
        return this.userName;
    }
}
