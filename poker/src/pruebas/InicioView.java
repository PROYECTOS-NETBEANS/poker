package pruebas;

import java.awt.event.ActionListener;
import java.util.Iterator;
import poker.cliente.negocio.PokerClient;
import javax.swing.DefaultListModel;
import poker.cliente.negocio.OnPackageListenerClient;
import poker.servidor.datos.Jugador;
import poker.servidor.negocio.Mesa;

/**
 * Vista cuando iniciamos la vista
 * @author LIMBERT
 */
public class InicioView extends javax.swing.JPanel implements OnPackageListenerClient{
    
    private PokerClient cliente = null;
    private DefaultListModel usuarios = null;
    
    /**
     * Identificador de mesa actual
     */
    private Mesa m = null;
    /**
     * El index de la mesa que esta actualmente en el boton
     */
    private int indexMesa = 1;
    /**
     * Vista con la lista de usuarios y lista de mesas
     * @param cliente Negocio del cliente
     * @param lst Escuchador de eventos para mostrar las vistas
     */
    public InicioView(PokerClient cliente, ActionListener lst) {
        initComponents();
        this.inicializar(cliente, lst);
    }
    
    /**
     * Metodo que carga en el boton la mesa siguiente
     */
    private void nextMesa(){
        if(indexMesa + 1 <= this.cliente.getMesas().size()){
            indexMesa++;
            this.cargarMesa();
        }else{
            indexMesa = 1;
            this.cargarMesa();
        }
    }
    /**
     * Inicializa todos los componentes del la vista
     * @param cliente Negocio del cliente
     * @param lst ActionListenter para el boton de ingresar a mesa
     */
    private void inicializar(PokerClient cliente, ActionListener lst){        
        this.cliente = cliente;
        usuarios = new DefaultListModel();        
        this.btnMesaActual.addActionListener(lst);     
    }
    /**
     * Metodo que carga una mesa al boton
     */
    public void cargarMesa(){
        try{
            System.out.println("xx");
            
            if(cliente.getMesas() == null)
                System.out.println("lista dde mesas nulo");

            if(cliente == null)
                System.out.println("cliente nulo");
            
            if(cliente.getMesas().size() > 0){
                int i = 1;
                System.out.println("xxaaa");
                Iterator it = cliente.getMesas().values().iterator();
                while(it.hasNext()){
                    Mesa m = (Mesa) it.next();
                    if(i == this.indexMesa){
                        this.m = m;
                        this.pintarMesa(this.m);
                    }
                    i++;
                }
            }else{ // si no hay ninguna mesa :: deshabilito el boton
                System.out.println("xx");
                this.btnMesaActual.setEnabled(false);
                this.btnMesaActual.setText("No hay Mesas");
            }            
        }catch(Exception e){
            System.out.println("[InicioView.cargarMesa] " + e.getMessage());
        }
    }
    /**
     * Adiciona los datos de la mesa pera el boton actual
     */
    public void pintarMesa(Mesa ms){
        this.btnMesaActual.setText("Mesa # " + String.valueOf(ms.getId()));
        this.btnMesaActual.setActionCommand("btnMesaActual-" + String.valueOf(ms.getId()));
        if(ms.mesaEstaVacia()){
            this.setEnabled(true);
        }else{
            this.setEnabled(false);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnMesaActual = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstJugadores = new javax.swing.JList<>();
        btnNextMesa = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 51, 51));
        setMaximumSize(new java.awt.Dimension(450, 350));
        setMinimumSize(new java.awt.Dimension(450, 350));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(450, 350));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnMesaActual.setBackground(new java.awt.Color(0, 204, 0));
        btnMesaActual.setText("Sin Mesa");
        btnMesaActual.setMaximumSize(new java.awt.Dimension(90, 90));
        btnMesaActual.setMinimumSize(new java.awt.Dimension(90, 90));
        btnMesaActual.setPreferredSize(new java.awt.Dimension(90, 90));
        add(btnMesaActual, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 50, -1, -1));

        jScrollPane1.setViewportView(lstJugadores);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 57, 129, 221));

        btnNextMesa.setText("Sig. Mesas>");
        btnNextMesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextMesaActionPerformed(evt);
            }
        });
        add(btnNextMesa, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 210, 90, 60));

        btnSalir.setText("X");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        add(btnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 300, 40, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 204));
        jLabel3.setText("Lista de jugadores");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 22, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 204));
        jLabel4.setText("Lista de Mesas");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 20, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnNextMesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextMesaActionPerformed
        this.nextMesa();
    }//GEN-LAST:event_btnNextMesaActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
      System.exit(0);
    }//GEN-LAST:event_btnSalirActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMesaActual;
    private javax.swing.JButton btnNextMesa;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> lstJugadores;
    // End of variables declaration//GEN-END:variables

    /**
     * Metodo que carga todos los jugadores en la lista
     */
    /**
     * Elimina un usuario de la lista de usuarios
     * @param key Identificador primario del usuario conectado
     */
    private void removerJugador(int key){
        for(int i = 0; i < usuarios.getSize(); i++){
            UsuarioModel u = (UsuarioModel) usuarios.get(i);
            if(u.getKey() == key){
                usuarios.remove(i);
                lstJugadores.setModel(usuarios);
                this.updateUI();
                return;
            }
        }
    }
    /**
     * Verifica si un modelo de usuario esta ya en la lista de usuarios conectados
     * @param usr modelo de usuario
     * @return True si lo encuentra , en otro caso falso
    */
    private boolean usuarioContains(UsuarioModel usr){
        boolean estado = false;
        for(int i = 0; i < usuarios.getSize(); i++){
            UsuarioModel u = (UsuarioModel) usuarios.get(i);
            if(u.getKey() == usr.getKey()){
                estado = true;
            }
        }
        return estado;
    }
    /**
     * Adiciona un jugador a la lista de jugadores conectado en el servidor
     * @param usr Modelo de usuario
     */
    private void addJugador(UsuarioModel usr){
        if(!usuarioContains(usr)){
            usuarios.addElement(usr);
            lstJugadores.setModel(usuarios);            
        }
    }
    @Override
    public void onNuevaMesa(Mesa mesa) {        
        this.cargarMesa();
        System.out.println("InicioViewer.onNuevaMesa cargando mesa");
    }

    @Override
    public void onMesaLlena(int idMesa, boolean estado) {
        System.out.println("InicioViewer.onMesaLlena no implementado");
    }
    @Override
    public void onNuevoJugador(Jugador jg){
        System.out.println("InicioView.onNuevoJugador Llego jg " + jg.getNickName());
        this.addJugador(new UsuarioModel(jg.getId(), jg.getNickName()));
    }

    @Override
    public void onJugadorDesconectado(Jugador jg) {
        System.out.println("InicioViewer.onJugadorDesconectado ok");
        this.removerJugador(jg.getId());
    }

    @Override
    public void onJugadorIngresaAMesa(Jugador jg, Mesa m) {
        System.out.println("InicioView.onJugadorIngresaAMesa no implementado");
    }
}

class UsuarioModel{
    private int key = 0;
    private String userName = "";
    /**
     * Constructor de clase
     * @param key identificador unico de usuario
     * @param userName nombre de usuario de la persona que acaba de conectarse
     * @param ip ip del cliente que se conecto
     */
    public UsuarioModel(int key, String userName){
        this.key = key;
        this.userName = userName;        
    }
    public int getKey(){
        return this.key;
    }
    public String getUserName(){
        return this.userName;
    }
    @Override
    public String toString(){
        return this.userName;
    }
}
