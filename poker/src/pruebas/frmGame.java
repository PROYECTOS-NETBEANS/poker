package pruebas;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import jsocket.client.OnConnectedEventClient;
import jsocket.client.OnConnectedListenerClient;
import poker.cliente.negocio.PokerClient;

/**
 * Interfaz Principal del juego
 * @author Alex Limbert Yalusqui <limbertyalusqui@gmail.com>
 */
public class frmGame extends javax.swing.JFrame implements ActionListener, OnConnectedListenerClient{
    
    private GameView viewGame = null;
    private InicioView viewIni = null;
    
    private PokerClient cliente = null;
    private String nickName = "Error de usuario";
    public frmGame() {
        initComponents();
        this.login();
    }
    /**
     * Inicializa las vistas que se mostraran cuando inicie session
     */
    private void inicializarVistaInicial(){    
        viewIni = new InicioView(cliente, this);
        this.setLayout(new BorderLayout());
        this.add(viewIni, BorderLayout.CENTER);
        this.getContentPane().add(viewIni);
        
    }
    private void login(){
        nickName = JOptionPane.showInputDialog("Ingrese un nickName : ", "pedro");
        
        if(nickName.length() > 0 ){
            cliente = new PokerClient(5555, "localhost");
            this.inicializarVistaInicial();            
            cliente.addEventListenerSocket(this);
            cliente.addEventListenerPackages(viewIni);
            cliente.conectarServidor(nickName);            
        } 
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 907, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 474, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmGame().setVisible(true);
            }
        });
    }

    @Override
    public void actionPerformed(ActionEvent e) {
         
    }

    @Override
    public void onConnect(Object o, OnConnectedEventClient ocec) {
        System.out.println("un suario conextado!!");
        this.setTitle("Usuario : <" + this.nickName + "> Conectado al servidor ");
    }

    @Override
    public void onDisconnect(Object o, OnConnectedEventClient ocec) {
        System.out.println("no implement frmGame.onDisconnect");
    }

    @Override
    public void onRead(Object o, OnConnectedEventClient ocec) {
        System.out.println("no implement frmGame.onRead");
    }

    @Override
    public void onConnectRefused() {
        System.out.println("no implement frmGame.onConnectRefused");
    }

    @Override
    public void onConnectFinally() {
        System.out.println("no implement frmGame.onConnectFinally");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
