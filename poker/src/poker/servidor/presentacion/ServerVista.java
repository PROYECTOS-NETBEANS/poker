package poker.servidor.presentacion;

import javax.swing.DefaultListModel;
import jsocket.server.JSocketServer;
import jsocket.server.OnConnectedEventServer;
import jsocket.server.OnConnectedListenerServer;
import poker.servidor.negocio.ServerPoker;

/**
 *
 * @author Alex Limbert Yalusqui <limbertyalusqui@gmail.com>
 */
public class ServerVista extends javax.swing.JFrame implements OnConnectedListenerServer{

    private DefaultListModel usuarios = null;
    private ServerPoker server = null;

    /**
     * Creates new form vista
     */
    public ServerVista() {
        initComponents();
        inicializar();
    }
    /**
     * Inicializa los objetos e inicia el servidor
     */
    private void inicializar(){
        usuarios = new DefaultListModel();
        server = new ServerPoker(this);
        server.iniciarServidor();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnIniciar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstUsuarios = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        lblEstado = new javax.swing.JLabel();
        addMesa = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnIniciar.setText("Iniciar Servidor");
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(lstUsuarios);

        jLabel1.setText("Usuarios Conectados Al Juego :");

        lblEstado.setText("ESTADO DE SERVIDOR : DETENIDO");

        addMesa.setText("Add Mesa");
        addMesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMesaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnIniciar)
                    .addComponent(addMesa))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(lblEstado)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnIniciar))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(addMesa)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(lblEstado)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
        server.iniciarServidor();
    }//GEN-LAST:event_btnIniciarActionPerformed

    private void addMesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMesaActionPerformed
        server.nuevaMesa();
    }//GEN-LAST:event_addMesaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerVista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerVista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerVista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerVista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerVista().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addMesa;
    private javax.swing.JButton btnIniciar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JList<String> lstUsuarios;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onServerStar(OnConnectedEventServer oces) {
        lblEstado.setText("ESTADO DE SERVIDOR : INICIADO");
    }

    @Override
    public void onConnect(Object o, OnConnectedEventServer data, String nick) {
        // cuando un usuario se conecta
        System.out.println("un usuario se conecto (vista)");
        this.addUsuarioList(new UsuarioModel(data.getOrigenClient(), nick));       
    }

    @Override
    public void onDisconnect(Object o, OnConnectedEventServer data) {
        if(data.getClientDisconnect()){
            System.out.println("vista.onDisconnect >> key : " + String.valueOf(data.getOrigenClient()));
            JSocketServer.removeClient(data.getOrigenClient());
            this.removerUsuario(data.getOrigenClient());
        } 
    }

    @Override
    public void onRead(Object o, OnConnectedEventServer oces, String string) {
        // Aqui llegan los mensajes de todos los clientes
        System.out.println("No se implemento la lectura de mensajes");
    }
    /**
     * Elimina un usuario de la lista de usuarios
     * @param key Identificador primario del usuario conectado
     */
    private void removerUsuario(int key){
        for(int i = 0; i < usuarios.getSize(); i++){
            UsuarioModel u = (UsuarioModel) usuarios.get(i);
            if(u.getKey() == key){
                usuarios.remove(i);
                lstUsuarios.setModel(usuarios);
                this.repaint();
                return;
            }
        }
    }
    
    private void addUsuarioList(UsuarioModel usr){
        usuarios.addElement(usr);
        lstUsuarios.setModel(usuarios);
    }
    
}

class UsuarioModel{
    private int key = 0;
    private String userName = "";
    /**
     * Constructor de clase
     * @param key identificador unico de usuario
     * @param userName nombre de usuario de la persona que acaba de conectarse
     * @param ip ip del cliente que se conecto
     */
    public UsuarioModel(int key, String userName){
        this.key = key;
        this.userName = userName;        
    }
    public int getKey(){
        return this.key;
    }
    public String getUserName(){
        return this.userName;
    }
    @Override
    public String toString(){
        return this.userName;
    }
}